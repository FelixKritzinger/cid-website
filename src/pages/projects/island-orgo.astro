---
// island-orgo.astro
import BaseLayout from '../../layouts/BaseLayout.astro';

const title = "Island Organic Modern";
const description = "Edisto design photos";
---
<BaseLayout {title} {description} showScrollButton={true}>
  <style>
    .page-wrapper {
      max-width: 67.5vw;
      margin: 0 auto;
      padding: 1rem 1rem;
    }

    h1, p {
      text-align: center;
    }

    h1 {
      margin-bottom: 1rem;
      margin-top: clamp(.25rem, 2.5*(.6rem + .35dvw + .2dvh), 4.25rem);
    }

    p {
      font-size: clamp(.25rem, .6rem + .35dvw + .2dvh, 4.25rem);
      margin-bottom: 2.5rem;
    }

    .gallery {
      display: flex;
      gap: clamp(.1rem, .25dvh + .75dvw + .5rem, 2rem);
    }

    .column {
      flex: 1;
      display: flex;
      flex-direction: column;
    }

    .column img {
      border-radius: 0;
      width: 100%;
      height: auto;
      display: block;
      margin-bottom: 1.5rem;
      cursor: pointer;
    }

    :global(.image-badge-wrapper) {
      position: relative;
      display: inline-block;
      width: 100%;
      margin-bottom: clamp(.1rem, .25dvh + .75dvw + .5rem, 2rem);
      cursor: pointer;
    }

    .image-badge-wrapper img {
      width: 100%;
      height: auto;
      display: block;
      cursor: pointer;
    }

    :global(.badge) {
      position: absolute;
      top: 1rem;
      left: 1rem;
      background: rgba(255, 255, 255, 0.8);
      color: black;
      padding: 0.25rem 0.5rem;
      font-size: 1rem;
      border-radius: 0.25rem;
      pointer-events: none;
    }

    @media (max-width: 1300px) {
      .page-wrapper {
        padding: 1rem 0rem;
        max-width: 90dvw;
      }
    }

    @media (max-width: 500px) {
      .gallery {
        flex-direction: column;
      }
    }

    .overlay {
      border-radius: 0;
      position: fixed;
      inset: 0;
      background: white;
      display: none;
      justify-content: center;
      align-items: center;
      z-index: 999;
      flex-direction: column;
      overflow: hidden;
    }

    .overlay.active {
      display: flex;
    }

    .overlay img {
      padding-top: 0dvh;
      border-radius: 0;
      max-height: 90dvh;
      max-width: 85dvw;
      transition: max-height 0.5s ease;
    }

    .image-wrapper {
      position: relative;
      display: inline-block;
      width: auto;
      height: auto;
    }

    .close-btn,
    .nav-btn {
      position: absolute;
      background: none;
      border: none;
      color: black;
      font-size: 2rem;
      cursor: pointer;
      z-index: 1000;
    }

    .close-btn {
      top: 2.5dvh;
      right: 2.5dvw;
    }

    .nav-btn.prev {
      top: 50%;
      left: 2.5vw;
      transform: translateY(-50%);
    }

    .nav-btn.next {
      top: 50%;
      right: 2.5vw;
      transform: translateY(-50%);
    }
  </style>

  <div class="page-wrapper">
    <h1>{title}</h1>
    <p>
      A family home on Edisto Island, designed to be relaxed and welcoming. A blend of modern forms and organic materials and furnishings encourages peaceful living and happy times. 
      The home was designed to take full advantage of the sea breezes and the incredible views of the marsh and Atlantic Ocean beyond.
    </p>

    <div class="gallery" id="gallery">
      <div class="column" id="col1"></div>
      <div class="column" id="col2"></div>
    </div>
  </div>

  <!-- Overlay -->
  <div class="overlay" id="overlay">
    <button class="close-btn" id="closeBtn">&times;</button>
    <button class="nav-btn prev" id="prevBtn">&#10094;</button>
    <div class="image-wrapper">
      <img id="overlayImg" src="" alt="Expanded view" />
    </div>
    <button class="nav-btn next" id="nextBtn">&#10095;</button>
  </div>

  <script>
    const manualLeftIndices = [25, 26];
    const manualRightIndices = [27];

    const overlay = document.getElementById('overlay');
    const overlayImg = document.getElementById('overlayImg');
    const closeBtn = document.getElementById('closeBtn');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');

    let currentIndex = 0;
    let failedCount = 0;

    const imageData = [
      { src: "/project-imgs/edisto/1.jpg" },
      { src: "/project-imgs/edisto/2.jpg" },
      { src: "/project-imgs/edisto/3.jpg" },
      { src: "/project-imgs/edisto/4.jpg" },
      { src: "/project-imgs/edisto/5.jpg" },
      { src: "/project-imgs/edisto/6.jpg" },
      { src: "/project-imgs/edisto/7.jpg" },
      { src: "/project-imgs/edisto/8.jpg" },
      { src: "/project-imgs/edisto/9.jpg" },
      { src: "/project-imgs/edisto/10.jpg" },
      { src: "/project-imgs/edisto/11.jpg" },
      { src: "/project-imgs/edisto/12.jpg" },
      { src: "/project-imgs/edisto/13.jpg" },
      { src: "/project-imgs/edisto/14.jpg" },
      { src: "/project-imgs/edisto/15.jpg" },
      { src: "/project-imgs/edisto/16.jpg" },
      { src: "/project-imgs/edisto/17.jpg" },
      { src: "/project-imgs/edisto/18.jpg" },
      { src: "/project-imgs/edisto/19.jpg" },
      { src: "/project-imgs/edisto/20.jpg" },
      { src: "/project-imgs/edisto/21.jpg" },
      { src: "/project-imgs/edisto/22.jpg" },
      { src: "/project-imgs/edisto/23.jpg" },
      { src: "/project-imgs/edisto/24.jpg" },
      { src: "/project-imgs/edisto/25.jpg" },
      { src: "/project-imgs/edisto/26.jpg" },
      { src: "/project-imgs/edisto/27.jpg" },
      { src: "/project-imgs/edisto/28.jpg" },
    ];

    function openOverlay(index) {
      currentIndex = index;
      const { src } = imageData[index];
      overlayImg.src = src;
      overlay.classList.add('active');
      document.body.style.overflow = 'hidden';
    }

    function closeOverlay() {
      overlay.classList.remove('active');
      document.body.style.overflow = '';
    }

    function preloadImage(index) {
      const img = new Image();
      img.src = imageData[index].src;
    }

    function showImage(index) {
      const { src } = imageData[index];
      overlayImg.src = src;
      preloadImage((index + 1) % imageData.length);
      preloadImage((index - 1 + imageData.length) % imageData.length);
    }

    function showPrev() {
      currentIndex = (currentIndex - 1 + imageData.length) % imageData.length;
      showImage(currentIndex);
    }

    function showNext() {
      currentIndex = (currentIndex + 1) % imageData.length;
      showImage(currentIndex);
    }

    closeBtn.addEventListener('click', closeOverlay);
    prevBtn.addEventListener('click', showPrev);
    nextBtn.addEventListener('click', showNext);

    document.addEventListener('keydown', (e) => {
      if (!overlay.classList.contains('active')) return;
      switch (e.key) {
        case 'Escape':
          closeOverlay();
          break;
        case 'ArrowLeft':
          showPrev();
          break;
        case 'ArrowRight':
          showNext();
          break;
      }
    });

    document.addEventListener('DOMContentLoaded', () => {
      const col1 = document.getElementById('col1');
      const col2 = document.getElementById('col2');
      loadImagesInOrder(imageData, col1, col2);
    });

    async function loadImagesInOrder(images, col1, col2) {
      let col1Height = 0;
      let col2Height = 0;

      for (let i = 0; i < images.length; i++) {
        const { src, badge } = images[i];
        const img = new Image();
        img.src = src;
        img.alt = `Gallery image ${i + 1}`;
        img.dataset.index = i;

        await new Promise((resolve) => {
          img.onload = () => {
            const wrapper = document.createElement('div');
            wrapper.classList.add('image-badge-wrapper');

            if (badge) {
              const badgeElem = document.createElement('div');
              badgeElem.classList.add('badge');
              badgeElem.textContent = badge;
              wrapper.appendChild(badgeElem);
            }

            wrapper.appendChild(img);

            if (manualLeftIndices.includes(i)) {
              col1.appendChild(wrapper);
            } else if (manualRightIndices.includes(i)) {
              col2.appendChild(wrapper);
            } else {
              if (col1Height <= col2Height) {
                col1.appendChild(wrapper);
                col1Height += img.getBoundingClientRect().height;
              } else {
                col2.appendChild(wrapper);
                col2Height += img.getBoundingClientRect().height;
              }
            }

            img.addEventListener('click', () => openOverlay(i));
            resolve();
          };

          img.onerror = () => {
            failedCount++;
            console.error(`Could not load ${src}`);
            if (failedCount > 5) {
              const warning = document.createElement('p');
              warning.textContent = "Some images failed to load. Try refreshing the page.";
              warning.style.color = 'red';
              document.querySelector('.page-wrapper').appendChild(warning);
            }
            resolve();
          };
        });
      }

      if (window.innerWidth < 500) {
        reflowColumnsForMobile();
      }
    }

    function reflowColumnsForMobile() {
      const col1 = document.getElementById('col1');
      const col2 = document.getElementById('col2');
      const gallery = document.getElementById('gallery');

      const combined = [];
      const col1Children = Array.from(col1.children);
      const col2Children = Array.from(col2.children);
      const maxLength = Math.max(col1Children.length, col2Children.length);

      for (let i = 0; i < maxLength; i++) {
        if (col1Children[i]) combined.push(col1Children[i]);
        if (col2Children[i]) combined.push(col2Children[i]);
      }

      col1.innerHTML = '';
      col2.innerHTML = '';

      const singleCol = document.createElement('div');
      singleCol.classList.add('column');
      combined.forEach((el) => singleCol.appendChild(el));

      gallery.innerHTML = '';
      gallery.appendChild(singleCol);
    }
  </script>
</BaseLayout>
