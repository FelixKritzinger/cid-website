---
import BaseLayout from '../../layouts/BaseLayout.astro';

const title = "Huntersville Home Office for Two";
const description = "Office for Two";
---
<BaseLayout {title} {description} showScrollButton = true>
  <style>
    .page-wrapper {
      max-width: 67.5vw;
      margin: 0 auto;
      padding: 2rem 1rem;
    }

    h1, p {
      text-align: center;
    }

    h1 {
      font-size: clamp(.5rem, 1.8vw, 3rem);
      margin-bottom: 1rem;
      margin-top: 2rem;
    }

    p {
      font-size: clamp(.25rem, .85vw, 1.25rem);
      margin-bottom: 2.5rem;
    }

    .gallery {
      display: flex;
      gap: 1.5rem;
    }

    .column {
      flex: 1;
      display: flex;
      flex-direction: column;
    }

    :global(.image-badge-wrapper) {
      position: relative;
      display: inline-block;
      width: 100%;
      margin-bottom: 1.5rem;
    }

    .image-badge-wrapper img {
      width: 100%;
      height: auto;
      display: block;
      cursor: pointer;
    }

    :global(.badge) {
      position: absolute;
      top: 1rem;
      left: 1rem;
      background: rgba(0, 0, 0, 0.7);
      color: white;
      padding: 0.25rem 0.5rem;
      font-size: 1rem;
      border-radius: 0.25rem;
      pointer-events: none;
    }


    @media (max-width: 768px) {
      .gallery {
        flex-direction: column;
      }
    }

    .overlay {
      position: fixed;
      inset: 0;
      background: rgba(0, 0, 0, 0.98);
      display: none;
      justify-content: center;
      align-items: center;
      z-index: 999;
      flex-direction: column;
      overflow: hidden;
      padding-bottom: 3rem;
    }

    .overlay.active {
      display: flex;
    }

    .overlay img {
      max-height: 80vh;
      max-width: 90vw;
      transition: max-height 0.3s ease;
    }

    .caption-container {
      margin-top: 1rem;
      color: white;
      max-width: 70vw;
      text-align: center;
      transition: max-height 0.3s ease;
      overflow: hidden;
    }

    .caption-container.collapsed {
      max-height: 0;
      opacity: 0;
      padding: 0;
    }

    .toggle-caption-btn {
      position: absolute;
      bottom: 1.5rem;
      left: 50%;
      transform: translateX(-50%);
      z-index: 10;
      background: rgba(0, 0, 0, 0.35);
      color: white;
      border: none;
      cursor: pointer;
      font-size: 1.2rem;
      border-radius: 50%;
      width: 2rem;
      height: 2rem;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .close-btn,
    .nav-btn {
      position: absolute;
      background: none;
      border: none;
      color: white;
      font-size: 2rem;
      cursor: pointer;
      z-index: 1000;
    }

    .close-btn {
      top: 1.5rem;
      right: 1.5rem;
    }

    .nav-btn.prev {
      top: 50%;
      left: 2.5vw;
      transform: translateY(-50%);
    }

    .nav-btn.next {
      top: 50%;
      right: 2.5vw;
      transform: translateY(-50%);
    }
  </style>

  <div class="page-wrapper">
    <h1>{title}</h1>
    <p>
      The homeowners were looking for a stylish update to their home office that would serve them both. 
      The redesign adds function and a wow factor to their front entry area where the office is located with a custom built T-shape desk and floating shelves.
    </p>

    <div class="gallery" id="gallery">
      <div class="column" id="col1"></div>
      <div class="column" id="col2"></div>
    </div>
  </div>

  <div class="overlay" id="overlay">
    <button class="close-btn" id="closeBtn">&times;</button>
    <button class="nav-btn prev" id="prevBtn">&#10094;</button>
    <img id="overlayImg" src="" alt="Expanded view" />
    <button class="nav-btn next" id="nextBtn">&#10095;</button>

    <button class="toggle-caption-btn" id="toggleCaptionBtn">&#8964;</button>
    <div class="caption-container" id="captionContainer">
      <p id="overlayCaption"></p>
    </div>
  </div>

  <script>
    const manualLeftIndices = [];
    const manualRightIndices = [];
    let currentIndex = 0;
    let captionExpanded = true;
    let failedCount = 0;

    const imageData = [
      {
        src: "/project-imgs/office/1.jpg",
        caption: "The T-shaped custom built desk provides work surface and storage for two.",
        badge: "Featured"
      },
      {
        src: "/project-imgs/office/2.jpg",
        caption: "The open plan office as viewed from the front door entry hall.",
      },
      {
        src: "/project-imgs/office/3.jpg",
        caption: "Detailed view of the workspace decor.",
      },
      {
        src: "/project-imgs/office/4.jpg",
        caption: "Design concept hand sketch of the office space.",
        badge: "Sketch"
      },
      {
        src: "/project-imgs/office/5.jpg",
        caption: "The office space before the redesign.",
        badge: "â—· Before"
      }
    ];

    document.addEventListener('DOMContentLoaded', () => {
      const col1 = document.getElementById('col1');
      const col2 = document.getElementById('col2');
      loadImagesInOrder(imageData, col1, col2);
    });

    async function loadImagesInOrder(images, col1, col2) {
      let col1Height = 0;
      let col2Height = 0;

      for (let i = 0; i < images.length; i++) {
        const { src, badge } = images[i];
        const img = new Image();
        img.src = src;
        img.alt = `Gallery image ${i + 1}`;
        img.dataset.index = i;

        await new Promise((resolve) => {
          img.onload = () => {
            const wrapper = document.createElement('div');
            wrapper.classList.add('image-badge-wrapper');

            if (badge) {
              const badgeElem = document.createElement('div');
              badgeElem.classList.add('badge');
              badgeElem.textContent = badge;
              wrapper.appendChild(badgeElem);
            }

            wrapper.appendChild(img);

            if (manualLeftIndices.includes(i)) {
              col1.appendChild(wrapper);
            } else if (manualRightIndices.includes(i)) {
              col2.appendChild(wrapper);
            } else {
              if (col1Height <= col2Height) {
                col1.appendChild(wrapper);
                col1Height += img.getBoundingClientRect().height;
              } else {
                col2.appendChild(wrapper);
                col2Height += img.getBoundingClientRect().height;
              }
            }

            img.addEventListener('click', () => openOverlay(i));
            resolve();
          };

          img.onerror = () => {
            failedCount++;
            console.error(`Could not load ${src}`);
            if (failedCount > 5) {
              const warning = document.createElement('p');
              warning.textContent = "Some images failed to load. Try refreshing the page.";
              warning.style.color = 'red';
              document.querySelector('.page-wrapper').appendChild(warning);
            }
            resolve();
          };
        });
      }
    }

    const overlay = document.getElementById('overlay');
    const overlayImg = document.getElementById('overlayImg');
    const overlayCaption = document.getElementById('overlayCaption');
    const captionContainer = document.getElementById('captionContainer');
    const toggleCaptionBtn = document.getElementById('toggleCaptionBtn');
    const closeBtn = document.getElementById('closeBtn');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');

    function openOverlay(index) {
      currentIndex = index;
      showImage(index);
      overlay.classList.add('active');
      document.body.style.overflow = 'hidden';
    }

    function closeOverlay() {
      overlay.classList.remove('active');
      document.body.style.overflow = '';
    }

    function showImage(index) {
      const { src, caption } = imageData[index];
      overlayImg.src = src;
      overlayCaption.textContent = caption;
    }

    function showPrev() {
      currentIndex = (currentIndex - 1 + imageData.length) % imageData.length;
      showImage(currentIndex);
    }

    function showNext() {
      currentIndex = (currentIndex + 1) % imageData.length;
      showImage(currentIndex);
    }

    closeBtn.addEventListener('click', closeOverlay);
    prevBtn.addEventListener('click', showPrev);
    nextBtn.addEventListener('click', showNext);

    toggleCaptionBtn.addEventListener('click', () => {
      captionExpanded = !captionExpanded;
      captionContainer.classList.toggle('collapsed');
    });

    document.addEventListener('keydown', (e) => {
      if (!overlay.classList.contains('active')) return;
      if (e.key === 'Escape') closeOverlay();
      if (e.key === 'ArrowLeft') showPrev();
      if (e.key === 'ArrowRight') showNext();
    });
  </script>
</BaseLayout>
